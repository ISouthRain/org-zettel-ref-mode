* org-zettel-ref-mode
[[file:readme_cn.org][中文说明]]
** Main Features: Automatically extract comments and summaries from the original text, form an overview window, and save as literature notes
Enter the command =M-x org-zettel-ref-init= to call up the "overview window", which displays comments recorded in the original text, as well as marked text.

1. Each time an overview is formed, a literature note will be automatically generated and saved to your customized folder
2. Quick commenting, =M-x org-zettel-ref-add-quick-note= allows you to directly input comments
3. When reviewing literature notes, you can jump directly from the comments back to the corresponding position in the original text to re-read the context
4. Provides a set of methods for converting documents in other formats to org format.

** Demo
As shown in the title, the left window displays the original text, and the right window displays the overview.

[[file:demo/org-zettel-ref-mode-demo.png]]

** Applicable Range
=org-zettel-ref-mode= only takes effect when org-mode is activated:

1. Directly for org files
2. Other user-defined text format files processed by org-mode, such as md, txt, etc.
   In this case, the functionality of the major-mode for that format file may be affected

However, I usually convert materials directly to org format for saving, so although the second situation exists, it's not common.

** Value: A reading method that balances breadth and depth

*** TL;DR version:

- Simply saving, excerpting, or copying materials is not enough; information needs to be processed and handled to be transformed into useful knowledge
- The Zettelkasten method emphasizes summarizing/reviewing in your own words and establishing connections, providing multiple opportunities for information processing, but many introductions ignore Luhmann's method of handling large amounts of literature notes
- Literature notes are a method that balances efficiency and depth. They record key points and inspirations, facilitate quick review and in-depth reading, and help distinguish between stock information and incremental information

*** Full version:

As a note-taking enthusiast and writer for many years, I've gradually come to understand some "counter-intuitive" points:

- Direct saving is almost useless.
- Direct excerpting is almost useless.
- Direct copying is almost useless.

The reason behind this is that simple transportation only increases materials while neglecting the reprocessing of materials. Remember this classic recursive relationship? Materials -> Information -> Knowledge -> Wisdom.

The Zettelkasten method always emphasizes summarizing in our own words, frequently reviewing past notes, and increasing connections between notes. From a methodological perspective, it provides at least 4-7 opportunities for information processing.

Even so, the texts or videos describing Zettelkasten in the market are always obsessed with introducing double links, falling into the misunderstanding of direct material preservation -- basically ignoring Niklas Luhmann's method of processing materials through massive literature notes.

I quote a number: among the more than 90,000 note cards left by Luhmann, over 10,000 are literature notes.

Luhmann's astonishing productivity came from the staggering amount of material processing, and behind this was the efficiency he demonstrated in processing these materials, that is, the creation of literature notes.

Luhmann had a habit of taking literature notes while reading. His books or materials had no underlines, no marginal notes, very clean, as if they had never been read. Each literature note was basically an index of a piece of material. Only when necessary would he excerpt the original text from the book.

However, after understanding how researchers make literature notes, I found that Luhmann's literature notes are almost consistent with general research literature notes. They also annotate in their own words while recording where this sentence inspiration appears specifically in the paper, to be read in depth later when there's a chance.

In other words, the method of literature notes balances efficiency and depth.

When it's not necessary to deeply understand a piece of material, use literature notes to record key points (not important content, but useful inspirations for yourself); when it's necessary to go deeper, quickly find the corresponding context through literature notes for in-depth reading and thinking, without wasting time reading from the beginning.

In addition to balancing efficiency and depth, literature notes have another advantage, which is that it's very easy to distinguish between stock information and incremental information. If similar concepts and key points have already been annotated, it's stock information, and there's no need to annotate when encountering it in another material; conversely, concepts and data that have never been understood are worth adding annotations and recording sources. This makes the discovery of new knowledge easier.

** Installation
1. Download the =org-zettel-ref-mode.el= file.
2. Place the file in your Emacs load path (e.g., =~/.emacs.d/lisp/=).
3. Add to your Emacs configuration file (such as ~/.emacs or ~/.emacs.d/init.el):

Configuration Example 1:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'org-zettel-ref-mode)
#+END_SRC

Configuration Example 2:
#+BEGIN_SRC emacs-lisp
(use-package org-zettel-ref-mode
  :ensure t  ; if installed via package manager
  :init
  (setq org-zettel-ref-overview-directory "~/Documents/org-overviews/")
  :config
  (setq org-zettel-ref-quick-markup-key "C-c m"))
#+END_SRC

Configuration Example 3 (for Doom Emacs users):

In =~/.doom.d/packages.el=:

#+BEGIN_SRC emacs-lisp
(package! org-zettel-ref-mode
  :recipe (:host github :repo "username/org-zettel-ref-mode"))
#+END_SRC

In =~/.doom.d/config.el=:

#+BEGIN_SRC emacs-lisp
(use-package! org-zettel-ref-mode
  :config
  (setq org-zettel-ref-overview-directory "~/Documents/org-overviews/"))
#+END_SRC
4. Restart Emacs or evaluate the newly added code.

** Basic Usage

*** Enable Mode
In any org-mode buffer, run:
=M-x org-zettel-ref-init=

*** Clean <<>> in Source Files

Since the core functionality of adding notes is to add <<>> target links in the original text, but many materials have a lot of <<>> text after being converted to org format.

Before making annotations or marking text in an org file for the first time, you can use =org-zettel-ref-clean-targets= to clean up the format and ensure the quick note function works properly.

*** Add Quick Notes
1. Place the cursor where you want to add a note.
2. Use the quick markup function.
3. Choose the "Quick Note" option.
4. Enter the note name and content.

*** Sync Overview File
Default auto-sync: Automatically executed when saving the source file by default.
Manual sync: =M-x org-zettel-ref-sync-overview=

*** ⚠️Precautions
1. Don't casually modify the suffix "-overview.org" of the note file name, as it may cause the overview to be lost.

** Advanced Configuration

*** Customize Overview File Location
#+BEGIN_SRC emacs-lisp
(setq org-zettel-ref-overview-directory "~/my-notes/overviews/")
#+END_SRC

*** Adjust Auto-sync Behavior
Disable auto-sync:
#+BEGIN_SRC emacs-lisp
(org-zettel-ref-disable-auto-sync)
#+END_SRC

Enable auto-sync:
#+BEGIN_SRC emacs-lisp
(org-zettel-ref-enable-auto-sync)
#+END_SRC

** Methods for Converting Various Documents to Org Files (Use with caution! Most code has not been tested, provided only for reference of possibilities)

*** PDF Conversion
- Using =marker= ::

marker (https://github.com/VikParuchuri/marker) is a powerful pdf-to-markdown tool that improves OCR recognition accuracy through AI.

Installation:

#+begin_src python
pip install marker-pdf
#+end_src

After successful installation, you can directly enter commands in the command line to convert pdf to markdown:

#+begin_src shell
marker_single /path/to/file.pdf /path/to/output/folder --batch_multiplier 2
#+end_src

You can package its command directly into an emacs command, to be called via =M-x=.

**** Integrating marker PDF Conversion Tool into Emacs

We can create a custom function to call the marker command-line tool and bind it to an Emacs command. This way, you can directly use =M-x= in Emacs to convert PDF files.

***** Emacs Lisp Implementation

#+BEGIN_SRC emacs-lisp
(defcustom marker-pdf-output-directory "~/Documents/pdf_conversions/"
  "Default output directory for marker PDF conversions."
  :type 'directory
  :group 'pdf-tools)

(defun marker-convert-pdf-to-markdown (pdf-file)
  "Convert a PDF file to Markdown using marker."
  (interactive "fSelect PDF file to convert: ")
  (let* ((output-dir (expand-file-name marker-pdf-output-directory))
         (default-directory (file-name-directory pdf-file))
         (file-name (file-name-nondirectory pdf-file))
         (output-file (concat output-dir
                              (file-name-sans-extension file-name)
                              ".md")))
    (unless (file-exists-p output-dir)
      (make-directory output-dir t))
    (message "Converting %s to Markdown..." file-name)
    (async-shell-command
     (format "marker_single \"%s\" \"%s\" --batch_multiplier 2"
             pdf-file output-dir)
     "*marker-conversion*")
    (add-hook 'async-shell-command-hook
              (lambda ()
                (message "Conversion complete. Output saved to %s" output-file)
                (find-file output-file)))))

(defalias 'pdf-to-markdown 'marker-convert-pdf-to-markdown)
#+END_SRC

***** Usage Instructions

1. Add the above code to your Emacs configuration file (e.g., =~/.emacs= or =~/.emacs.d/init.el=).
2. Reload the configuration or restart Emacs.
3. Use the =M-x pdf-to-markdown= command to convert PDF files.
4. Select the PDF file to convert.
5. The conversion process will run in the background, and the converted Markdown file will automatically open upon completion.

***** Custom Options

- You can change the default output directory by customizing the =marker-pdf-output-directory= variable.

***** Notes

- Make sure marker-pdf is installed via pip.
- Converting large PDF files may take some time, please be patient.
- Conversion quality may vary depending on the complexity of the PDF.

***** Integration with org-zettel-ref-mode

After conversion, you can use Pandoc to convert the Markdown file to Org format, then apply org-zettel-ref-mode:

#+BEGIN_SRC emacs-lisp
(defun convert-markdown-to-org-and-apply-zettel (markdown-file)
  "Convert Markdown to Org and apply org-zettel-ref-mode."
  (interactive "fSelect Markdown file: ")
  (let* ((org-file (concat (file-name-sans-extension markdown-file) ".org")))
    (call-process "pandoc" nil nil nil "-f" "markdown" "-t" "org"
                  "-o" org-file markdown-file)
    (find-file org-file)
    (org-zettel-ref-mode 1)))
#+END_SRC

Use =M-x convert-markdown-to-org-and-apply-zettel= to convert Markdown files and apply org-zettel-ref-mode.

*** EPUB Conversion
- Using =pandoc= ::
  Pandoc is a powerful document conversion tool that can convert EPUB to org format.

  #+BEGIN_SRC emacs-lisp
  (defun convert-epub-to-org (epub-file)
    (let ((org-file (concat (file-name-sans-extension epub-file) ".org")))
      (call-process "pandoc" nil nil nil "-f" "epub" "-t" "org"
                    "-o" org-file epub-file)
      (find-file org-file)))
  #+END_SRC

*** Web Page Conversion (WIP)

*** Integration with org-zettel-ref-mode
- Automatic conversion and import
  You can write a function to detect the file type and automatically call the appropriate conversion function:

  #+BEGIN_SRC emacs-lisp
  (defun org-zettel-ref-import-document (file)
    (interactive "fSelect document to import: ")
    (let ((extension (file-name-extension file)))
      (cond
       ((string= extension "pdf") (convert-pdf-to-org file))
       ((string= extension "epub") (convert-epub-to-org file))
       (t (message "Unsupported file format")))))
  #+END_SRC

- Automatically apply org-zettel-ref-mode after conversion
  Add logic to automatically enable org-zettel-ref-mode in the conversion function:

  #+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hook
            (lambda ()
              (when (and (eq major-mode 'org-mode)
                         (string-match-p "converted-from-\\(pdf\\|epub\\)"
                                         (buffer-file-name)))
                (org-zettel-ref-mode 1))))
  #+END_SRC

** Acknowledgements

org-zettel-ref-mode was inspired by my friend [[https://github.com/lijigang][@lijigang]]'s [[https://github.com/lijigang/org-marked-text-overview][org-marked-text-overview]]. Due to extensive modifications, after communication, it is separately released as org-zettel-ref-mode.

** Version History

- v0.1 (2024-8-21): Initial release
  - Implemented basic quick note and marking functions
  - Added automatic synchronization mechanism
  - Provided customization options
