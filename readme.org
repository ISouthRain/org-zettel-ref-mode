* org-zettel-ref-mode

** Version 0.2(2024-08-29 relased)
   - Improved overall workflow, providing automated scripts to process different formats of electronic documents
   - Enhanced connectivity with other tools; through custom configuration, notes generated by org-zettel-ref-mode can be saved in denote or org-roam format
   - Added quick markup functionality; after highlighting a paragraph in the source file, you can launch =org-zettel-quick-markup= to quickly add bold, italic, underline, and other markups to the highlighted text

** Main features: Automatically extract comments and summaries from the original text, form an overview window, and save as literature notes
Enter the =M-x org-zettel-ref-init= command to call up the "overview window", which displays comments recorded in the original text, as well as marked text.

1. Each time an overview is formed, a literature note will be automatically created and saved in your customized folder
2. Quick commenting, =M-x org-zettel-ref-add-quick-note= allows you to input comments directly
3. When reviewing literature notes, you can jump directly from the comments back to the corresponding position in the original text to re-read the context
4. Provides a set of methods for converting documents in other formats to org format
5. (Added on 2024-08-29) Provides quick markup functionality to quickly add org-style bold, italic, underline, and other markups to text in the source file

** Demo
As shown in the title, the left window displays the original text, and the right window displays the overview.

[[file:demo/org-zettel-ref-mode-demo.png]]

** Scope of application
=org-zettel-ref-mode= only works when org-mode is activated:

1. Directly for org files
2. Other user-defined text format files processed in org-mode, such as md, txt, etc.
   In this case, the functionality of the major-mode for that format file may be affected

However, I usually convert materials directly to org format for saving, so although the second situation exists, it's not common.

** Value: A reading method that balances breadth and depth

TL;DR version:

- Simply saving, excerpting, or copying materials is not enough; information needs to be processed and handled to be transformed into useful knowledge
- The Zettelkasten method emphasizes summarizing/reviewing in your own words and establishing connections, providing multiple opportunities for information processing, but many introductions overlook Luhmann's method of handling large amounts of literature notes
- Literature notes are a method that balances efficiency and depth. They record key points and inspirations, facilitating quick review and in-depth reading, while helping to distinguish between stock information and incremental information

Full version:

As a note-taking enthusiast and writer for many years, I've gradually come to understand some "counter-intuitive" facts:

- Direct saving is almost useless.
- Direct excerpting is almost useless.
- Direct copying is almost useless.

The reason behind this is that simple transfer only increases materials while neglecting the reprocessing of the materials. Remember this classic recursive relationship? Materials -> Information -> Knowledge -> Wisdom.

The Zettelkasten method always emphasizes summarizing in our own words, frequently reviewing past notes, and increasing connections between notes. From a methodological perspective, it provides at least 4-7 opportunities for information processing.

Even so, the texts or videos describing Zettelkasten on the market are always obsessed with introducing bidirectional links, falling into the trap of direct material saving - basically ignoring Niklas Luhmann's method of processing materials through massive literature notes.

I quote a number: among the more than 90,000 note cards Luhmann left behind, over 10,000 were literature notes.

Luhmann's astonishing productivity came from the staggering amount of material processing, and behind this was the efficiency he demonstrated in processing these materials, that is, the creation of literature notes.

Luhmann had a habit of taking literature notes while reading. His books or materials had no underlines, no marginal notes, very clean, as if they had never been read. Each literature note was basically an index of a piece of material. Only when necessary would he excerpt the original text from the book.

However, after understanding how researchers make literature notes, I found that Luhmann's literature notes are almost identical to general research literature notes. They also annotate in their own words while recording where the inspiration for this sentence specifically appears in the paper, in case there's an opportunity for deeper reading later.

In other words, the method of literature notes balances efficiency and depth.

When there's no need for in-depth understanding of a piece of material, use literature notes to record key points (not important content, but useful inspirations for yourself); when in-depth study is necessary, quickly find the corresponding context through literature notes for deep reading and thinking, without wasting time reading from the beginning.

Apart from balancing efficiency and depth, literature notes have another advantage: it's very easy to distinguish between stock information and incremental information. Concepts and key points that have already been annotated are stock information, and there's no need to annotate them when encountered in another material; conversely, concepts and data that have never been understood are worth adding annotations and recording sources. This makes the discovery of new knowledge easier.

** Installation
*** Installation steps
1. Download the =org-zettel-ref-mode.el= file.
2. Place the file in your Emacs load path (e.g., =~/.emacs.d/lisp/=).
3. Add to your Emacs configuration file (such as ~/.emacs or ~/.emacs.d/init.el):

Configuration example 1:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'org-zettel-ref-mode)
#+END_SRC

Configuration example 2:
#+BEGIN_SRC emacs-lisp
(use-package org-zettel-ref-mode
  :ensure t  ; If installed through package manager
  :init
  (setq org-zettel-ref-overview-directory "~/Documents/org-overviews/")
  :config
  (setq org-zettel-ref-quick-markup-key "C-c m"))
#+END_SRC

Configuration example 3 (for Doom Emacs users):

In =~/.doom.d/packages.el=:

#+BEGIN_SRC emacs-lisp
(package! org-zettel-ref-mode
  :recipe (:host github :repo "username/org-zettel-ref-mode"))
#+END_SRC

In =~/.doom.d/config.el=:

#+BEGIN_SRC emacs-lisp
(use-package! org-zettel-ref-mode
  :config
  (setq org-zettel-ref-overview-directory "~/Documents/org-overviews/"))
#+END_SRC
4. Restart Emacs or evaluate the code you just added.

** Basic usage

*** Enable mode
In any org-mode buffer, run:
=M-x org-zettel-ref-init=

*** Clean up <<>> in source files

Since the core functionality of adding notes is to add <<>> target links in the original text, but many materials have a lot of <<>> text after being converted to org format.

Before making annotations or marking text in an org file for the first time, you can use =org-zettel-ref-clean-targets= to clean up the format and ensure the quick note function works properly.

*** Add quick notes
1. Place the cursor where you want to add a note
2. =M-x org-zettel-ref-add-quick-note=
3. Enter the note name and content

*** Quickly add markup
1. Select text in the source file
2. =M-x org-zettel-ref-quick-markup=
3. Choose your desired markup style

*** Sync overview file
Default automatic sync: Automatically executed when saving the source file by default.
Manual sync: =M-x org-zettel-ref-sync-overview=

*** ⚠️Precautions
1. Don't casually modify note file names. If modified, adding quick notes/marks on the source file again will generate duplicate notes during synchronization.

** Advanced configuration

*** Customize note saving mode
(Updated 2024-08-29) org-zettel-ref-mode provides three modes: normal, org-roam, and denote, allowing note files to be saved in corresponding formats. For example, after selecting org-roam mode, the saved note files will automatically be appended with an id for easy retrieval.

Configuration method:

=(setq org-zettel-ref-mode-type 'normal) ; Options: 'normal, 'denote, 'org-roam)=


*** Customize overview file location
#+BEGIN_SRC emacs-lisp
(setq org-zettel-ref-overview-directory "~/my-notes/overviews/")
#+END_SRC


*** Adjust automatic sync behavior
Disable automatic sync:
#+BEGIN_SRC emacs-lisp
(org-zettel-ref-disable-auto-sync)
#+END_SRC

Enable automatic sync:
#+BEGIN_SRC emacs-lisp
(org-zettel-ref-enable-auto-sync)
#+END_SRC

** Workflow

[[file:demo/pkm-system-diagram.png]]

*** Use scripts to convert PDF, ePub, html, md, txt and other document formats to org files

Script: [[file:convert-to-org.py]]

I wrote a Python script to convert various document formats (including PDF, EPUB, HTML, Markdown, and TXT) to Org format. It supports English, Chinese, and mixed Chinese-English PDF documents, and can handle both electronic and scanned PDF versions.

Main features
1. Supports conversion of multiple document formats (PDF, EPUB, HTML, Markdown, TXT) to Org format
2. Automatically identifies and processes electronic and scanned PDF versions
3. Uses OCR technology to process scanned PDFs, supporting Chinese and English recognition
4. File size check to prevent processing of oversized files
5. Archives source files after scanning
6. Detailed processing log output

Usage instructions:
1. Ensure all necessary libraries are installed (see library installation guide below)
2. Three parameters need to be provided when running the script:
   - --temp: temporary folder path
   - --reference: reference material folder path (output location for Org files)
   - --archive: archive folder path
3. Example command:
   ```
   python document_convert_to_org.py --temp ~/Documents/temp_convert/ --reference ~/Documents/ref/ --archive /Volumes/Collect/archives/
   ```

Installing dependencies:

1. PyPDF2
   Installation command: `pip install PyPDF2`
   Purpose: Process PDF files, check if PDF is scanned version

2. pdf2image
   Installation command: `pip install pdf2image`
   Purpose: Convert PDF to image for OCR
   Note: This library depends on poppler, you may need to install poppler separately

3. pytesseract
   Installation command: `pip install pytesseract`
   Purpose: Perform OCR (Optical Character Recognition)
   Note: This library requires additional installation of Tesseract OCR engine
   - On Ubuntu/Debian: `sudo apt-get install tesseract-ocr`
   - On macOS (using Homebrew): `brew install tesseract`
   - On Windows, download installer: https://github.com/UB-Mannheim/tesseract/wiki

4. Pillow (PIL)
   Installation command: `pip install Pillow`
   Purpose: Image processing, used in conjunction with pdf2image and pytesseract

5. Other standard libraries (no additional installation required):
   - os
   - sys
   - shutil
   - subprocess
   - argparse
   - time
   - platform
   - zipfile
   - tempfile

*** Use browser extensions like Markdownload to save web pages as Markdown files locally, then use scripts to convert
*** Use Whisper to convert audio files to text
*** ⚠️Precautions
It is recommended to use this script to convert ePub, markdown, txt, and electronic version PDF documents.

It is not recommended to use this script to convert scanned PDF versions, as the conversion speed is slow and the conversion effect is not very good.


** Frequently Asked Questions

Q: How to use org-zettel-ref-mode across multiple projects?
A: You can set different overview directories for each project, using a =let-bound= approach to dynamically change the value of =org-zettel-ref-overview-directory= when switching projects.

Q: What if the overview file becomes too large?
A: Consider splitting the overview file by topic or time period. You can customize the =org-zettel-ref-create-or-open-overview-file= function to achieve this.

Q: How to backup my notes?
A: Include both source files and overview files in your version control system (such as Git). Additionally, performing regular file system level backups is also a good practice.

** Troubleshooting

If you encounter problems:
1. Ensure you are using the latest version of org-zettel-ref-mode.
2. Check your Emacs configuration to ensure there are no conflicting settings.
3. Try to reproduce the problem in a clean Emacs configuration (emacs -q).
4. Check for any error messages in the =*Messages*= buffer.

If the problem persists, please submit an issue through the GitHub repository, including a description of the problem and steps to reproduce it.

** Contributions

We welcome community contributions! Here are some ways to participate:
- Report bugs or suggest features.
- Submit patches or pull requests.
- Improve documentation or write tutorials.
- Share your experiences and tips using org-zettel-ref-mode.

** Acknowledgements

org-zettel-ref-mode was inspired by my friend [[https://github.com/lijigang][@lijigang]]'s [[https://github.com/lijigang/org-marked-text-overview][org-marked-text-overview]]. Due to extensive modifications, after communication, it is separately released as org-zettel-ref-mode.

** Version History
- v0.2 (2024-08-29)
  - Improved overall workflow, providing automated scripts to process different formats of electronic documents
  - Enhanced connectivity with other tools; through custom configuration, notes generated by org-zettel-ref-mode can be saved in denote or org-roam format
  - Added quick markup functionality; after highlighting a paragraph in the source file, you can launch =org-zettel-quick-markup= to quickly add bold, italic, underline, and other markups to the highlighted text
- v0.1 (2024-8-21): Initial release
  - Implemented basic quick note and markup functions
  - Added automatic synchronization mechanism
  - Provided customization options

** Future Plans

- Improve performance, optimize processing of large files
✅ Integration with other knowledge management packages, such as org-roam, denote
- Support more file formats (possibly)

If you like it, please Star.
